apply plugin: 'kotlin-android'

def checkName = project.name.replaceAll(/-.*/, '')

android {
	compileSdk = 31

	defaultConfig {
		minSdk = 14
		targetSdk = 31
	}

	lint { // com.android.build.api.dsl.Lint it ->
		boolean onlySpecific = project.property("lints.check.only.specific").toBoolean()
		it.abortOnError = false
		it.checkAllWarnings = !onlySpecific
		if (onlySpecific) {
			it.checkOnly = [checkName]
		} else {
			// com.android.tools.lint.LintCliClient.CliConfiguration.getDefaultSeverity disables this by default
			it.enable += ['WrongThreadInterprocedural']
		}
		it.xmlReport = true
		it.checkTestSources = true
		it.explainIssues = true
		it.showAll = true
		it.checkReleaseBuilds = false
		it.checkGeneratedSources = false
		it.checkDependencies = false
	}
}

repositories {
	google()
	mavenCentral()
}

dependencies {
	implementation "androidx.annotation:annotation:1.0.1"
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${VERSION_KOTLIN}"

	testImplementation "junit:junit:4.12"
	testImplementation "org.jetbrains.kotlin:kotlin-test-junit:${VERSION_KOTLIN}"
}

project.ext.expectedViolationCount = { count ->
	tasks.named("lintVerifyCount").configure { task ->
		task.ext.expectedViolationCount = count
		task.inputs.property("expectedViolationCount", expectedViolationCount)
	}
}

def lintVerifyCount = tasks.register("lintVerifyCount") { task ->
	// configure with expectedViolationCount(3)
	ext.expectedViolationCount = 1
	task.inputs.property("expectedViolationCount", expectedViolationCount)
	File report = android.lintOptions.xmlOutput ?: file("${buildDir}/reports/lint-results-debug.xml")
	task.inputs.file(report)
	// dummy output that will never change, but this keeps the task up to date when inputs unchanged
	task.outputs.file("${buildDir}/reports/lint-checked.txt")
	doLast {
		def expectedViolationCount = ext.expectedViolationCount
		def numberOfIssues = report.text.count("<issue\n")
		def numberOfViolations = report.text.count("id=\"${checkName}\"")
		//println("${checkName}: ${expectedViolationCount} == ${numberOfViolations}/${numberOfIssues}")
		if (numberOfViolations < numberOfIssues) {
			throw new GradleException(
					"There were ${numberOfIssues} issues in ${project}, " +
							"but not all of them were ${checkName}")
		}
		if (numberOfViolations != expectedViolationCount) {
			throw new GradleException(
					"Expected ${expectedViolationCount}, " +
							"but there were ${numberOfViolations} ${checkName} reported.\n" +
							"Use expectedViolationCount(${numberOfViolations}) in module's build.gradle, " +
							"if this is the correct number of violations, " +
							"or review ${report}.")
		}
	}
}

def debugging = project.findProperty("org.gradle.debug")?.toBoolean() == true
if (!debugging) {
	tasks.named("lint").configure { Task task ->
		task.finalizedBy(lintVerifyCount)
	}
}
