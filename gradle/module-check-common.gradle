apply plugin: 'org.jetbrains.kotlin.android'

def checkName = project.name.replaceAll(/-.*/, '')
def checkPack = kotlin.text.StringsKt.removeSuffix(project.path, ":${project.name}").replaceAll(':', '.')

project.android {
	namespace = "net.twisterrob.lints${checkPack.toLowerCase()}.${project.name.replaceAll('-', '_')}"
	compileSdk = libs.versions.android.compileSdk.get().toInteger()

	defaultConfig {
		minSdk = libs.versions.android.minSdk.get().toInteger()
		targetSdk = libs.versions.android.targetSdk.get().toInteger()
	}

	lint { // com.android.build.api.dsl.Lint it ->
		boolean onlySpecific = project.property("lints.check.only.specific").toBoolean()
		it.abortOnError = false
		it.checkAllWarnings = !onlySpecific
		if (onlySpecific) {
			it.checkOnly = [checkName]
		} else {
			// com.android.tools.lint.LintCliClient.CliConfiguration.getDefaultSeverity disables this by default
			it.enable += ['WrongThreadInterprocedural']
		}
		it.disable += [
				// Most of the projects will contain something that's not used.
				"UnusedResources",
				// The project uses Renovate to keep dependencies up to date.
				// Some of the modules explicitly use lower versions.
				"GradleDependency",
				"NewerVersionAvailable",
				"AndroidGradlePluginVersion",
		]
		it.xmlReport = true
		it.checkTestSources = true
		it.explainIssues = true
		it.showAll = true
		it.checkReleaseBuilds = false
		it.checkGeneratedSources = false
		it.checkDependencies = false
	}
}

java.toolchain.languageVersion = libs.versions.java.android.map(JavaLanguageVersion::of)
tasks.withType(JavaCompile.class).configureEach { JavaCompile task ->
	task.options.compilerArgs += [
			"-Xlint:all",
			"-Werror",
			// TODEL Workaround for https://issuetracker.google.com/issues/359561906, remove when android-35 v3 is released.
			"-Xlint:-classfile",
	]
}
kotlin {
	jvmToolchain(libs.versions.java.android.get().toInteger())
}

dependencies {
	implementation(libs.androidx.annotation)
	implementation(enforcedPlatform(libs.kotlin.bom))
	implementation(libs.kotlin.stdlib)

	testImplementation(libs.junit4)
	testImplementation(libs.kotlin.test)
}

project.ext.expectedViolationCount = { count ->
	tasks.named("lintVerifyCount", VerifyCount).configure { VerifyCount task ->
		task.expectedViolationCount.set(count)
	}
}

project.ext.verifiedVariant = { variant ->
	tasks.named("lintVerifyCount", VerifyCount).configure { VerifyCount task ->
		task.verifiedVariant.set(variant)
	}
}

project.ext.checkName = { check ->
	tasks.named("lintVerifyCount", VerifyCount).configure { VerifyCount task ->
		task.checkName.set(check)
	}
}

def lintVerifyCount = tasks.register("lintVerifyCount", VerifyCount)

def debugging = project.findProperty("org.gradle.debug")?.toBoolean() == true
if (!debugging) {
	tasks.named("lint").configure { Task task ->
		task.finalizedBy(lintVerifyCount)
	}
}

abstract class VerifyCount extends DefaultTask {

	/**
	 * Configure with `verifiedVariant("fooBar")`.
	 */
	@Input
	abstract Property<String> getVerifiedVariant()

	@Input
	abstract Property<String> getCheckName()

	/**
	 * Configure with `expectedViolationCount(3)`.
	 */
	@Input
	abstract Property<Integer> getExpectedViolationCount()

	@InputFile
	@PathSensitive(PathSensitivity.RELATIVE)
	Provider<File> report =
			verifiedVariant
					.map { variant ->
						project.android.lint.xmlOutput
								?: project.layout.buildDirectory.file("reports/lint-results-${variant}.xml").get().asFile
					}

	/**
	 * Dummy output that will never change, but this keeps the task up to date when inputs unchanged.
	 */
	@OutputFile
	abstract RegularFileProperty getDummyOutput()

	@Internal
	abstract DirectoryProperty getBaseDirectory()

	VerifyCount() {
		verifiedVariant.convention("debug")
		checkName.convention(project.name.replaceAll(/-.*/, ''))
		expectedViolationCount.convention(1)
		baseDirectory.convention(project.rootProject.layout.projectDirectory)
		dummyOutput.value(project.layout.buildDirectory.file("reports/lint-count.txt"))
	}

	@TaskAction
	void verify() {
		def expectedViolationCount = expectedViolationCount.get()
		def report = this.report.get()
		def checkName = this.checkName.get()
		def numberOfIssues = report.text.count("<issue\n")
		def numberOfViolations = report.text.count("id=\"${checkName}\"")
		dummyOutput.get().asFile.text = """\
			check=${checkName}
			report=${baseDirectory.get().asFile.toPath().relativize(report.toPath())}
			issues=${numberOfIssues}
			checkInstances=${numberOfViolations}
			expected=${expectedViolationCount}
		""".stripIndent()
		//println("${checkName}: ${expectedViolationCount} == ${numberOfViolations}/${numberOfIssues}")
		if (numberOfViolations < numberOfIssues) {
			throw new GradleException(
					"There were ${numberOfIssues} issues in ${project}, " +
							"but not all of them were ${checkName}.\n" +
							"See ${report.toURI().toString().replaceFirst(/^file:\//, "file:///")}.")
		}
		if (numberOfViolations != expectedViolationCount) {
			throw new GradleException(
					"Expected ${expectedViolationCount}, " +
							"but there were ${numberOfViolations} ${checkName} reported.\n" +
							"Use expectedViolationCount(${numberOfViolations}) in module's build.gradle, " +
							"if this is the correct number of violations,\n" +
							"or review ${report.toURI().toString().replaceFirst(/^file:\//, "file:///")}.")
		}
	}
}
