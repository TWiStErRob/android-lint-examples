buildscript {
	repositories {
		google()
		mavenCentral()
	}

	dependencies {
		classpath "com.android.tools.build:gradle:${VERSION_AGP}"
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${VERSION_KOTLIN}"
	}
}

tasks.register("clean", Delete.class) {
	delete rootProject.buildDir
}

tasks.register("createModule") {
	def gitAdd = { File file ->
		exec {
			commandLine "git", "add", file.absolutePath
			ignoreExitValue = true
		}
	}

	doFirst {
		ext.checkCategory = project.property("checkCategory").toString()
		ext.checkName = project.property("checkName").toString()
	}

	doLast {
		def packageName = "net.twisterrob.lints.${checkCategory.toLowerCase()}"
		def module = project(":${checkCategory}").file(checkName)

		def buildGradle = new File(module, "build.gradle")
		buildGradle.parentFile.mkdirs()
		buildGradle.text = """
			apply from: rootProject.file('gradle/module-check-lib.gradle')
			
			expectedViolationCount(1 /*java*/ + 1 /*kotlin*/)
		""".stripIndent().trim() + "\n"
		gitAdd(buildGradle)

		def manifest = new File(module, "src/main/AndroidManifest.xml")
		manifest.parentFile.mkdirs()
		manifest.text = "<manifest package=\"${packageName}.${checkName}\" />\n"
		gitAdd(manifest)

		def java = new File(module, "src/main/java/${packageName.replace('.', '/')}/${checkName}Violation.java")
		java.parentFile.mkdirs()
		java.text = """
			package ${packageName};
			
			public class ${checkName}Violation {
			}
		""".stripIndent().trim() + "\n"
		gitAdd(java)

		def kotlin = new File(module, "src/main/java/${packageName.replace('.', '/')}/${checkName}Violation.kt")
		kotlin.parentFile.mkdirs()
		kotlin.text = """
			package ${packageName}
		""".stripIndent().trim() + "\n"
		gitAdd(kotlin)

		def layout = new File(module, "src/main/res/layout/${checkName.toLowerCase()}.xml")
		layout.parentFile.mkdirs()
		layout.text = """
			<View
					xmlns:android="http://schemas.android.com/apk/res/android"
					android:layout_width="wrap_content"
					android:layout_height="wrap_content"
					>
			</View>
		""".stripIndent().trim() + "\n"
		gitAdd(layout)

		def settingsGradle = rootProject.file("settings.gradle")
		def lines = settingsGradle.text.split(/\r?\n/).toList()
		def includeLine = "include ':${checkCategory}:${checkName}'"
		def commentedLineIndex = lines.indexOf("//$includeLine".toString()) // otherwise GString !=
		if (commentedLineIndex != -1) {
			logger.info("Uncommenting include in settings.gradle: $includeLine.")
			lines.set(commentedLineIndex, includeLine)
		} else {
			def categoryStartIndex = lines.findIndexOf { it == "include ':${checkCategory}'" }
			def categoryEndIndex = lines.findIndexOf(categoryStartIndex + 1) { it.count(":") == 1 }
			def currentIndex = categoryStartIndex + 1
			logger.info("Found Category at $categoryStartIndex until $categoryEndIndex.")
			def insertIndex = lines.findIndexOf(currentIndex) {
				currentIndex++ < categoryEndIndex && (it == "" || includeLine < it)
			}
			if (insertIndex == -1) {
				logger.info("Couldn't find sorted location for $includeLine, inserting after ${lines[currentIndex - 1]}.")
				insertIndex = currentIndex
			}
			logger.info("Inserting include $includeLine after ${lines[insertIndex - 1]}.")
			lines.add(insertIndex, includeLine)
		}
		settingsGradle.text = lines.join(System.lineSeparator()) + System.lineSeparator()
		gitAdd(settingsGradle)
	}

	doLast {
		def module = ":${checkCategory}:${checkName}"
		println("Run lint on this module with\ngradlew ${module}:cleanLint ${module}:lint")
	}

	doLast {
		def reportFile = file("${checkCategory}/${checkName}/build/reports/lint-results.html")
		def reportDir = reportFile.parentFile
		if (!reportFile.exists() && reportDir.mkdirs() && reportDir.isDirectory()) {
			reportFile.text = "refresh after running lint"
		}
		//noinspection UnnecessaryQualifiedReference
		OperatingSystem os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem
		if (os.isWindows()) {
			Runtime.runtime.exec(["cmd.exe", "/c", reportFile.absolutePath] as String[]).waitFor()
		} else if (os.isMacOsX()) {
			Runtime.runtime.exec(["open", reportFile.absolutePath] as String[]).waitFor()
		} else {
			// no action, don't know how to open a link
		}
	}
}
